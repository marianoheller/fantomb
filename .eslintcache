[{"/home/wdw44/code/fantomb/src/index.tsx":"1","/home/wdw44/code/fantomb/src/reportWebVitals.ts":"2","/home/wdw44/code/fantomb/src/app/index.tsx":"3","/home/wdw44/code/fantomb/src/components/player/index.tsx":"4","/home/wdw44/code/fantomb/src/components/input/index.tsx":"5","/home/wdw44/code/fantomb/src/components/controls/index.tsx":"6","/home/wdw44/code/fantomb/src/components/timebar/index.tsx":"7","/home/wdw44/code/fantomb/src/components/recorder/index.tsx":"8","/home/wdw44/code/fantomb/src/shared/hooks/media.ts":"9","/home/wdw44/code/fantomb/src/shared/operators/mouse.ts":"10","/home/wdw44/code/fantomb/src/components/controls/hooks.ts":"11","/home/wdw44/code/fantomb/src/components/timebar/region/index.tsx":"12","/home/wdw44/code/fantomb/src/components/timebar/region/hooks.ts":"13"},{"size":267,"mtime":1613407281670,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1613407281670,"results":"16","hashOfConfig":"15"},{"size":3363,"mtime":1613519491600,"results":"17","hashOfConfig":"15"},{"size":993,"mtime":1613425757290,"results":"18","hashOfConfig":"15"},{"size":981,"mtime":1613407281670,"results":"19","hashOfConfig":"15"},{"size":2799,"mtime":1613422107940,"results":"20","hashOfConfig":"15"},{"size":3980,"mtime":1613515828690,"results":"21","hashOfConfig":"15"},{"size":1981,"mtime":1613564477550,"results":"22","hashOfConfig":"15"},{"size":4593,"mtime":1613564969820,"results":"23","hashOfConfig":"15"},{"size":1495,"mtime":1613450804660,"results":"24","hashOfConfig":"15"},{"size":496,"mtime":1613421657520,"results":"25","hashOfConfig":"15"},{"size":2016,"mtime":1613498722727,"results":"26","hashOfConfig":"15"},{"size":3785,"mtime":1613518279620,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"agnh1m",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},"/home/wdw44/code/fantomb/src/index.tsx",[],["59","60"],"/home/wdw44/code/fantomb/src/reportWebVitals.ts",[],"/home/wdw44/code/fantomb/src/app/index.tsx",["61"],"import React, { useEffect, useRef } from \"react\";\n\nimport Player from \"../components/player\";\nimport Input from \"../components/input\";\nimport Timebar from \"../components/timebar\";\nimport Controls, { ControlAction } from \"../components/controls\";\n\nimport {\n  useObservable,\n  useObservableCallback,\n  useObservableState,\n  useSubscription,\n} from \"observable-hooks\";\nimport { filter, map, tap, throttleTime, withLatestFrom } from \"rxjs/operators\";\nimport { merge, OperatorFunction } from \"rxjs\";\nimport ReactPlayer from \"react-player\";\nimport Recorder from \"../components/recorder\";\n\ntype Region = { start: number; end: number };\ntype TRegion = Region | undefined;\n\nexport type Status = \"PlayingVideo\" | \"PlayingVoice\" | \"Recording\" | \"Idle\";\n\nfunction App() {\n  const playerRef = useRef<ReactPlayer>(null);\n\n  const [onUrlChange, url$] = useObservableCallback<string | undefined>(\n    (u$) => u$,\n    undefined\n  );\n\n  const [onRegion, region$] = useObservableCallback<TRegion>((r$) => r$);\n\n  const [onDuration, duration$] = useObservableCallback<number | undefined>(\n    (d$) => d$\n  );\n\n  const [onPlayerProgress, playerProgress$] = useObservableCallback<number>(\n    (n$) => n$\n  );\n\n  const [onManualProgress, manualProgress$] = useObservableCallback<number>(\n    (n$) => n$.pipe(tap((n) => playerRef.current?.seekTo(n)))\n  );\n\n  const progress$ = merge(playerProgress$, manualProgress$).pipe(\n    throttleTime(100)\n  );\n\n  const [status, onControlAction] = useObservableState<Status, ControlAction>(\n    (a$) =>\n      a$.pipe(\n        withLatestFrom(region$),\n        map(([{ type }, r]) => {\n          switch (type) {\n            case \"VideoStartedPlaying\":\n              if (r) playerRef.current?.seekTo(r.start)\n              return \"PlayingVideo\";\n            case \"VoiceStartedPlaying\":\n              return \"PlayingVoice\";\n            case \"VoiceStartedRecording\":\n              return \"Recording\";\n            case \"VideoStoppedPlaying\":\n            case \"VoiceStoppedPlaying\":\n            case \"VoiceStoppedRecording\":\n            default:\n              return \"Idle\";\n          }\n        })\n      ),\n    \"Idle\"\n  );\n\n  const regionEndAutomatically$ = useObservable<Region>(() =>\n    playerProgress$.pipe(\n      withLatestFrom(region$),\n      filter(([, r]) => r !== undefined) as OperatorFunction<\n        [number, TRegion],\n        [number, Region]\n      >,\n      filter(([v, r]) => v >= r.end),\n      map(([, r]) => r)\n    )\n  );\n\n  useSubscription(regionEndAutomatically$, (r) => {\n    onControlAction({ type: \"VideoStoppedPlaying\" });\n    playerRef.current?.seekTo(r.start);\n  });\n\n  return (\n    <div>\n      <p>https://www.youtube.com/watch?v=EqE_AH39144</p>\n      <p>https://www.youtube.com/watch?v=sS55zq6Hz8A</p>\n      <Input onChange={onUrlChange} />\n      <Timebar\n        duration$={duration$}\n        progress={progress$}\n        onClick={onManualProgress}\n        onRegion={onRegion}\n        appRegion$={region$}\n      />\n      <Controls\n        status={status}\n        onAction={onControlAction}\n        duration$={duration$}\n      />\n      <Player\n        ref={playerRef}\n        url$={url$}\n        onDuration={onDuration}\n        onProgress={onPlayerProgress}\n        playing={status === \"PlayingVideo\"}\n      />\n      <Recorder disabled={false} status={status} onAction={onControlAction} />\n    </div>\n  );\n}\n\nexport default App;\n","/home/wdw44/code/fantomb/src/components/player/index.tsx",[],"/home/wdw44/code/fantomb/src/components/input/index.tsx",[],"/home/wdw44/code/fantomb/src/components/controls/index.tsx",[],"/home/wdw44/code/fantomb/src/components/timebar/index.tsx",["62"],"import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { merge, Observable, OperatorFunction, timer } from \"rxjs\";\nimport {\n  useObservable,\n  useObservableCallback,\n  useObservableState,\n  useSubscription,\n} from \"observable-hooks\";\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  throttleTime,\n  withLatestFrom,\n} from \"rxjs/operators\";\nimport * as mouse from \"../../shared/operators/mouse\";\n\nimport Region, { TRegion } from \"./region\";\n\ninterface TimebarProps {\n  duration$: Observable<number | undefined>;\n  progress: Observable<number>;\n  onClick: (x: number) => void;\n  onRegion: (r: TRegion) => void;\n  appRegion$: Observable<TRegion>;\n}\n\nconst Svg = styled.svg<{ interactable: boolean }>`\n  width: 100%;\n  height: 2rem;\n  background-color: rgb(240, 240, 240);\n  cursor: ${({ interactable }) => (interactable ? \"pointer\" : \"auto\")};\n  pointer-events: ${({ interactable }) => (interactable ? \"all\" : \"none\")};\n`;\n\nconst Marker = styled.rect`\n  width: 1px;\n  height: 100%;\n  fill: rgb(10, 10, 10);\n`;\n\nconst Timebar: React.FC<TimebarProps> = ({\n  duration$,\n  progress,\n  onClick,\n  onRegion,\n  appRegion$,\n}) => {\n  const svgRef = useRef(null);\n  const duration = useObservableState(duration$);\n  const [markerPosition] = useObservableState<string>(\n    () =>\n      progress.pipe(\n        map((v) => {\n          if (!v) return \"0px\";\n          return `${v * 100}%`;\n        })\n      ),\n    \"0px\"\n  );\n\n  const [onWheel, wheel$] = useObservableCallback<\n    React.MouseEvent<SVGSVGElement, WheelEvent>\n  >((e$) =>\n    e$.pipe(\n      map((e) => {\n        e.stopPropagation();\n        return e;\n      })\n    )\n  );\n\n  const [onMouseDown, mouseDown$] = useObservableCallback<\n    React.MouseEvent<SVGSVGElement, MouseEvent>\n  >((e$) => e$.pipe(map(mouse.preventDefault)));\n\n  const [onMouseUp, mouseUp$] = useObservableCallback<\n    React.MouseEvent<SVGSVGElement, MouseEvent>\n  >((e$) => e$.pipe(map(mouse.preventDefault)));\n\n  const mousePosRelative$ = mouse.globalMouseMove$.pipe(\n    map(mouse.globalMouseEventToXDistance(svgRef)),\n    filter((v) => v !== undefined) as OperatorFunction<\n      number | undefined,\n      number\n    >\n  );\n\n  const [_onClick, click$] = useObservableCallback<\n    React.MouseEvent<SVGSVGElement, MouseEvent>\n  >((e$) => e$);\n\n  const leftClick$ = click$.pipe(\n    filter((e) => e.button === 0),\n    map(mouse.globalMouseEventToXDistance(svgRef))\n  );\n\n  const rightClick$ = mouseDown$.pipe(\n    filter((e) => e.button === 2),\n    throttleTime(500)\n  );\n\n  const holdClick$ = mouseDown$.pipe(\n    switchMap((e) =>\n      timer(100).pipe(\n        takeUntil(mouseUp$),\n        map(() => mouse.globalMouseEventToXDistance(svgRef)(e))\n      )\n    )\n  );\n\n  const regionClear$ = rightClick$.pipe(map(() => undefined));\n\n  const _region$: Observable<TRegion> = merge(\n    holdClick$.pipe(\n      switchMap((x1) =>\n        mousePosRelative$.pipe(\n          map((x2) => {\n            if (x1 > x2) return { start: x2, end: x1 };\n            else return { start: x1, end: x2 };\n          }),\n          takeUntil(mouseUp$)\n        )\n      )\n    ),\n    regionClear$\n  );\n\n  const regionEnd$ = holdClick$.pipe(\n    switchMap(() => mouseUp$.pipe(take(1))),\n    withLatestFrom(_region$),\n    map(([_, r]) => r)\n  );\n\n  useSubscription(leftClick$, onClick);\n  useSubscription(regionEnd$, onRegion);\n  useSubscription(regionClear$, onRegion);\n  useSubscription(wheel$, () => console.warn(\"WHEEL\"));\n\n  const region$ = useObservable(() => merge(appRegion$, _region$));\n\n  return (\n    <>\n      <Svg\n        ref={svgRef}\n        onContextMenu={(e) => e.preventDefault()}\n        onClick={_onClick}\n        onMouseUp={onMouseUp}\n        onMouseDown={onMouseDown}\n        onWheel={onWheel}\n        interactable={duration !== undefined}\n      >\n        <Marker x={markerPosition} />\n        <Region region$={region$} containerRef={svgRef} onRegion={onRegion} />\n      </Svg>\n    </>\n  );\n};\n\nexport default Timebar;\n","/home/wdw44/code/fantomb/src/components/recorder/index.tsx",[],"/home/wdw44/code/fantomb/src/shared/hooks/media.ts",[],"/home/wdw44/code/fantomb/src/shared/operators/mouse.ts",[],"/home/wdw44/code/fantomb/src/components/controls/hooks.ts",[],"/home/wdw44/code/fantomb/src/components/timebar/region/index.tsx",["63","64","65","66","67","68","69","70","71","72","73","74","75","76","77"],"import React, { RefObject, useRef } from \"react\";\nimport { combineLatest, merge, Observable, of } from \"rxjs\";\nimport {\n  useObservable,\n  useObservableCallback,\n  useObservableState,\n  useSubscription,\n} from \"observable-hooks\";\nimport styled from \"styled-components\";\n\nimport * as mouse from \"../../../shared/operators/mouse\";\nimport {\n  map,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom,\n} from \"rxjs/operators\";\nimport { useRegionDrag, useRegionResize } from \"./hooks\";\n\nconst Rect = styled.rect`\n  height: 100%;\n  fill: rgba(0, 0, 0, 0.25);\n  stroke: rgba(0, 0, 0, 0.25);\n  cursor: all-scroll;\n`;\n\nconst Border = styled.rect`\n  height: 100%;\n  width: 1px;\n  fill: rgba(0,0,0,0.5);\n  cursor: col-resize;\n`;\n\nexport type TRegion = { start: number; end: number } | undefined;\n\nexport interface RegionProps {\n  region$: Observable<TRegion>;\n  containerRef: RefObject<SVGSVGElement>;\n  onRegion: (r: TRegion) => void;\n}\n\nconst Region: React.FC<RegionProps> = (props) => {\n  const { region$, containerRef, onRegion } = props;\n  const drag = useRegionDrag(props);\n  const resizeStart = useRegionResize({ ...props, key: \"start\" });\n  const resizeEnd = useRegionResize({ ...props, key: \"end\" });\n\n  const [region] = useObservableState<TRegion>(\n    () =>\n      merge(\n        region$,\n        drag.updatedRegion$,\n        resizeStart.updatedRegion$,\n        resizeEnd.updatedRegion$\n      ),\n    undefined\n  );\n\n  if (region === undefined) return null;\n  return (\n    <>\n      <Rect\n        onClick={(e) => e.stopPropagation()}\n        onMouseDown={drag.onMouseDown}\n        x={`${region.start * 100}%`}\n        width={`${(region.end - region.start) * 100}%`}\n      />\n      <Border\n        x={`${region.start * 100}%`}\n        onClick={(e) => e.stopPropagation()}\n        onMouseDown={resizeStart.onMouseDown}\n      />\n      <Border\n        x={`${region.end * 100}%`}\n        onClick={(e) => e.stopPropagation()}\n        onMouseDown={resizeEnd.onMouseDown}\n      />\n    </>\n  );\n};\n\nexport default Region;\n","/home/wdw44/code/fantomb/src/components/timebar/region/hooks.ts",["78","79","80","81","82","83"],"import React, { RefObject, useRef } from \"react\";\nimport { combineLatest, merge, Observable, of } from \"rxjs\";\nimport {\n  useObservable,\n  useObservableCallback,\n  useObservableState,\n  useSubscription,\n} from \"observable-hooks\";\n\nimport * as mouse from \"../../../shared/operators/mouse\";\nimport {\n  map,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom,\n} from \"rxjs/operators\";\n\nexport interface Region { start: number; end: number } \nexport type TRegion = Region | undefined;\n\nexport interface UseRegionDragInput {\n  region$: Observable<TRegion>;\n  containerRef: RefObject<SVGSVGElement>;\n  onRegion: (r: TRegion) => void;\n}\n\nexport interface UseRegionDragOutput {\n  updatedRegion$: Observable<TRegion>;\n  onMouseDown: (e: React.MouseEvent<SVGRectElement, MouseEvent>) => void;\n}\n\nexport const useRegionDrag = ({\n  region$,\n  containerRef,\n  onRegion,\n}: UseRegionDragInput): UseRegionDragOutput => {\n  const [onMouseDown, mouseDown$] = useObservableCallback<\n    React.MouseEvent<SVGRectElement, MouseEvent>\n  >((e$) => e$.pipe(map(mouse.stopPropagation)));\n\n  const mouseDrag$ = useObservable(() =>\n    mouseDown$.pipe(\n      map(mouse.preventDefault),\n      switchMap((md) =>\n        mouse.globalMouseMove$.pipe(\n          map((mm) => {\n            mm.preventDefault();\n            if (!containerRef.current) return 0;\n            const dim = containerRef.current.getBoundingClientRect();\n            const deltaX = mm.clientX - md.clientX;\n            return deltaX / dim.width;\n          }),\n          takeUntil(mouse.globalMouseUp$)\n        )\n      )\n    )\n  );\n\n  const updatedRegion$ = useObservable<TRegion>(() =>\n    mouseDrag$.pipe(\n      withLatestFrom(region$),\n      map(([delta, r]) => {\n        if (!r) return r;\n        return { end: r.end + delta, start: r.start + delta };\n      })\n    )\n  );\n\n  const finishedUpdating$ = useObservable<TRegion>(() =>\n    updatedRegion$.pipe(\n      switchMap((r) =>\n        mouse.globalMouseUp$.pipe(\n          take(1),\n          map(() => r)\n        )\n      )\n    )\n  );\n\n  useSubscription(finishedUpdating$, onRegion);\n  return { updatedRegion$, onMouseDown };\n};\n\n\nexport interface UseRegionResize {\n  region$: Observable<TRegion>;\n  containerRef: RefObject<SVGSVGElement>;\n  onRegion: (r: TRegion) => void;\n  key: keyof Region\n}\n\nexport interface UseRegionResizeOutput {\n  updatedRegion$: Observable<TRegion>;\n  onMouseDown: (e: React.MouseEvent<SVGRectElement, MouseEvent>) => void;\n}\n\nexport const useRegionResize = ({\n  region$,\n  containerRef,\n  onRegion,\n  key,\n}: UseRegionResize): UseRegionResizeOutput => {\n  const [onMouseDown, mouseDown$] = useObservableCallback<\n    React.MouseEvent<SVGRectElement, MouseEvent>\n  >((e$) => e$.pipe(map(mouse.stopPropagation)));\n\n  const mouseDrag$ = useObservable(() =>\n    mouseDown$.pipe(\n      map(mouse.preventDefault),\n      switchMap((md) =>\n        mouse.globalMouseMove$.pipe(\n          map((mm) => {\n            mm.preventDefault();\n            if (!containerRef.current) return 0;\n            const dim = containerRef.current.getBoundingClientRect();\n            const deltaX = mm.clientX - md.clientX;\n            return deltaX / dim.width;\n          }),\n          takeUntil(mouse.globalMouseUp$)\n        )\n      )\n    )\n  );\n\n  const updatedRegion$ = useObservable<TRegion>(() =>\n    mouseDrag$.pipe(\n      withLatestFrom(region$),\n      map(([delta, r]) => {\n        if (!r) return r;\n        return { ...r, [key]: r[key] + delta };\n      })\n    )\n  );\n\n  const finishedUpdating$ = useObservable<TRegion>(() =>\n    updatedRegion$.pipe(\n      switchMap((r) =>\n        mouse.globalMouseUp$.pipe(\n          take(1),\n          map(() => r)\n        )\n      )\n    )\n  );\n\n  useSubscription(finishedUpdating$, onRegion);\n  return { updatedRegion$, onMouseDown };\n};\n",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":26},{"ruleId":"88","severity":1,"message":"92","line":16,"column":3,"nodeType":"90","messageId":"91","endLine":16,"endColumn":6},{"ruleId":"88","severity":1,"message":"93","line":1,"column":28,"nodeType":"90","messageId":"91","endLine":1,"endColumn":34},{"ruleId":"88","severity":1,"message":"94","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":23},{"ruleId":"88","severity":1,"message":"95","line":2,"column":44,"nodeType":"90","messageId":"91","endLine":2,"endColumn":46},{"ruleId":"88","severity":1,"message":"96","line":4,"column":3,"nodeType":"90","messageId":"91","endLine":4,"endColumn":16},{"ruleId":"88","severity":1,"message":"97","line":5,"column":3,"nodeType":"90","messageId":"91","endLine":5,"endColumn":24},{"ruleId":"88","severity":1,"message":"98","line":7,"column":3,"nodeType":"90","messageId":"91","endLine":7,"endColumn":18},{"ruleId":"88","severity":1,"message":"99","line":11,"column":13,"nodeType":"90","messageId":"91","endLine":11,"endColumn":18},{"ruleId":"88","severity":1,"message":"100","line":13,"column":3,"nodeType":"90","messageId":"91","endLine":13,"endColumn":6},{"ruleId":"88","severity":1,"message":"101","line":14,"column":3,"nodeType":"90","messageId":"91","endLine":14,"endColumn":12},{"ruleId":"88","severity":1,"message":"102","line":15,"column":3,"nodeType":"90","messageId":"91","endLine":15,"endColumn":7},{"ruleId":"88","severity":1,"message":"103","line":16,"column":3,"nodeType":"90","messageId":"91","endLine":16,"endColumn":12},{"ruleId":"88","severity":1,"message":"92","line":17,"column":3,"nodeType":"90","messageId":"91","endLine":17,"endColumn":6},{"ruleId":"88","severity":1,"message":"104","line":18,"column":3,"nodeType":"90","messageId":"91","endLine":18,"endColumn":17},{"ruleId":"88","severity":1,"message":"105","line":45,"column":20,"nodeType":"90","messageId":"91","endLine":45,"endColumn":32},{"ruleId":"88","severity":1,"message":"106","line":45,"column":34,"nodeType":"90","messageId":"91","endLine":45,"endColumn":42},{"ruleId":"88","severity":1,"message":"93","line":1,"column":28,"nodeType":"90","messageId":"91","endLine":1,"endColumn":34},{"ruleId":"88","severity":1,"message":"94","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":23},{"ruleId":"88","severity":1,"message":"107","line":2,"column":25,"nodeType":"90","messageId":"91","endLine":2,"endColumn":30},{"ruleId":"88","severity":1,"message":"95","line":2,"column":44,"nodeType":"90","messageId":"91","endLine":2,"endColumn":46},{"ruleId":"88","severity":1,"message":"108","line":6,"column":3,"nodeType":"90","messageId":"91","endLine":6,"endColumn":21},{"ruleId":"88","severity":1,"message":"92","line":16,"column":3,"nodeType":"90","messageId":"91","endLine":16,"endColumn":6},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'tap' is defined but never used.","'useRef' is defined but never used.","'combineLatest' is defined but never used.","'of' is defined but never used.","'useObservable' is defined but never used.","'useObservableCallback' is defined but never used.","'useSubscription' is defined but never used.","'mouse' is defined but never used.","'map' is defined but never used.","'switchMap' is defined but never used.","'take' is defined but never used.","'takeUntil' is defined but never used.","'withLatestFrom' is defined but never used.","'containerRef' is assigned a value but never used.","'onRegion' is assigned a value but never used.","'merge' is defined but never used.","'useObservableState' is defined but never used.","no-global-assign","no-unsafe-negation"]